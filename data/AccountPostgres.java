package dev.cavazos.data;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import dev.cavazos.ds.ArrayList;
import dev.cavazos.ds.List;
import dev.cavazos.models.Account;
import dev.cavazos.models.User;
import dev.cavazos.utils.ConnectionUtil;

public class AccountPostgres implements AccountDAO {
	private ConnectionUtil connUtil = ConnectionUtil.getConnectionUtil();
	
	@Override
	public Account create(Account acc) {
		try (Connection conn = connUtil.getConnection()) {
			// because this is a transaction (DML), we'll start by
			// setting autocommit to false
			conn.setAutoCommit(false);
			
			String sql = "insert into bankdb.account "
					+ "(id, name, balance, user_id) "
					+ "values (default, ?, ?, ?)";
			// when inserting, we want to retrieve the ID that was generated
			// so we need to specify which column(s) are autogenerated
			String[] keys = {"id"};
			
			PreparedStatement stmt = conn.prepareStatement(sql, keys);
			stmt.setString(1, acc.getName());
			stmt.setDouble(2, acc.getBalance());
			stmt.setInt(3, acc.getId());
			
			int rowsAffected = stmt.executeUpdate();
			ResultSet resultSet = stmt.getGeneratedKeys();
			if (resultSet.next() && rowsAffected==1) {
				acc.setId(resultSet.getInt("id"));
				conn.commit();
			} else {
				conn.rollback();
				return null;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return acc;
	}

	@Override
	public Account findByID(int id) {
		Account acc = null;
		
		// try-with-resources: sets up closing for closeable resources
		try (Connection conn = connUtil.getConnection()) {
			// set up the SQL statement that we want to execute
			String sql = "select account.id, " 
					+ "name "
					+ "account.balance, " 
					+ "join user on account.user_id = user.id" 
					+ "from account "
					+ "where account.id = ?";

			// set up that statement with the database
			// preparedstatement is pre-processed to prevent sql injection
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id); // parameter indexes start at 1 (the first ?)

			// execute the statement
			ResultSet resultSet = stmt.executeQuery();

			// process the result set
			if (resultSet.next()) {
				String name = resultSet.getString("name");
				Double balance = resultSet.getDouble("balance");
				int userid = resultSet.getInt("user_id");
				
				User user = new User(
						resultSet.getString("username"),
						resultSet.getString("passwd"));
						
				acc = new Account(name, balance, user.getID());
				acc.setId(id);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return acc;
	}

	@Override
	public void update(Account acc) {
		try (Connection conn = connUtil.getConnection()){
			//TML
			conn.setAutoCommit(false);
			
			String sql = "update account"
					+ "set name = ?, "
					+ "balance = ?, "
					+ "user_id = ? "
					+ "where id=?";
			
		PreparedStatement stmt = conn.prepareStatement(sql);
		stmt.setString(1, acc.getName());
		stmt.setDouble(2, acc.getBalance());
		stmt.setInt(3, acc.getCustomer());
		stmt.setInt(4, acc.getId());
		
		int rowsAffected = stmt.executeUpdate();
		if(rowsAffected<= 1) {
			conn.commit();
		} else {
			conn.rollback();
		}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void delete(Account acc) {
		try(Connection conn = connUtil.getConnection()){
			// TML
			conn.setAutoCommit(false);
			
			String sql = "delete from account where id=?";
			
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setInt(1, acc.getId());
			
			int rowsAffected = stmt.executeUpdate();
			if(rowsAffected<=1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public List<Account> findAll() {
		List<Account> allAcc = new ArrayList<>();
		
		try (Connection conn = connUtil.getConnection()){
			String sql = "select account.id, "
					+ "name, "
					+ "balance, "
					+ "user_id as user_id "
					+ "user_passwd as user_passwd"
					+ "from account "
					+ "join customer on account.user_id = customer.id";
			
			Statement stmt = conn.createStatement();
			
			ResultSet resultSet = stmt.executeQuery(sql);
			
			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String name = resultSet.getString("name");
				double balance = resultSet.getDouble("balance");
				
				User user = new User(resultSet.getString(name),
						resultSet.getString("user_passwd"));
				
				Account acc = new Account(name, balance, user.getID());
				acc.setId(id);
				
				allAcc.add(acc);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allAcc;
	}
	
}
